/*
------------------------------------------------------------------------------
ADVERTISING COST MODEL v4 (V2 CURRENT VERSION)
------------------------------------------------------------------------------
  PURPOSE: 
    Recalculates daily advertising costs based on multiple pricing models:
    - CPM (Cost Per Mille/Thousand Impressions)
    - CPC (Cost Per Click)
    - CPA (Cost Per Acquisition/Conversion)
    - Flat Fee (Daily or Impression-based distribution)

  BUSINESS LOGIC HIGHLIGHTS:
    - Special 60-day extension for email campaigns (business rule for billing)
    - Proration based on actual vs. planned flight days
    - Different handling for CPM overdelivery vs standard delivery
    - Multiple cost distribution methods for Flat fee packages

  DATA FLOW:
    1. base_delivery_metadata: Joins delivery + Prisma metadata
    2. delivery_rollups: Calculates package-level aggregates
    3. calculated_fields: Adds derived metrics and status flags
    4. cost_model: Applies cost logic per cost method
    5. Final output: Complete dataset with recalculated costs

  KEY CHANGES FROM V1:
    - Added total_inflight_impressions for more accurate CPM overdelivery handling
    - Enhanced prorated cost calculation, especially for active campaigns
    - Modified Flat fee distribution logic to use in-flight impressions
    - Added debugging fields for better troubleshooting

  VERSION HISTORY:
    v1: Initial implementation (now deprecated)
    v2: Current version - Enhanced CPM overdelivery handling, modified proration
    v4: File version (matches filename for tracking)

LAST UPDATED: 2025-05-02

*/

-------------- V2 current ------------
create or replace table dcm_costModel_scratch.20250501_dcmCostModel_v4_Scratch as
WITH

--! 1. [  bd. ] JOIN RAW DELIVERY + METADATA (one source of truth)
base_delivery_metadata AS  (
  /*
    Joins raw delivery to Prisma metadatdcm.
    BUSINESS RULES:
    - 60-day email flight extension: Email campaigns have a 60-day billing window beyond
      the official end date to account for delayed engagement
    - Only includes rows with impressions > 0 (no zero-impression records)
    - All Prisma metadata fields are prefixed with 'p_' for clarity
    
    KEY FIELDS ADDED:
    - flight_date_flag: Binary indicator (0=in-flight, 1=out-of-flight)
    - flight_status_flag: Text status ('live' or 'ended')
    - rate_raw: Extracted rate value from package_roadblock string
  */
  SELECT
    -- Delivery fields from raw data (source system fields)
      a.`date`,
      a.`campaign`,                   -- Campaign name/identifier
      a.`package_roadblock`,          -- Package name, contains pricing info at end
      a.`package_id`,                 -- Unique package identifier (join key)
      a.`placement_id`,               -- Placement-level identifier
      a.`impressions`,                -- Number of ad impressions delivered
      a.`KEY`,                      -- Unique record identifier
      a.`ad`,                       -- Ad name/identifier
      a.`click_rate`,               -- Percentage of impressions resulting in clicks
      a.`clicks`,                   -- Number of clicks delivered
      a.`creative`,                 -- Creative name/identifier
      a.`media_cost`,               -- Original cost from source system (not used in recalc)
      a.`rich_media_video_completions`, -- Number of video completion events
      a.`rich_media_video_plays`,   -- Number of video play events
      a.`total_conversions`,        -- Number of conversion events

    -- Prisma metadata fields with aliases for clarity
      b.channel_group AS p_channel_group,             -- Channel categorization
      b.advertiser_name AS p_advertiser_name,         -- Client/advertiser name
      b.cost_method AS p_cost_method,             -- Pricing model: CPM, CPC, CPA, Flat
      b.p_package_friendly,                       -- Human-readable package name
      b.start_date AS p_start_date,               -- Original campaign start date

      -- [p_end_date] Extended flight window for email packages (+60 days)
        -- BUSINESS RULE: Email campaigns have a 60-day extension beyond official end date
        CASE
          WHEN a.package_roadblock LIKE '%email%' THEN DATE_ADD(b.end_date, INTERVAL 60 DAY)
          ELSE b.end_date
        END AS p_end_date,

      -- Prisma Imps and Cost fields
      b.total_days AS p_total_days,                  -- Planned campaign duration in days
      b.planned_daily_spend_pk AS p_pkg_daily_planned_cost,  -- Planned daily spend
      b.planned_cost_pk AS p_pkg_total_planned_cost,         -- Total planned package cost
      b.planned_daily_impressions_pk AS p_pkg_daily_planned_imps,  -- Planned daily impressions
      b.planned_imps_pk AS p_pkg_total_planned_imps,         -- Total planned impressions


    -- [flight_date_flag] Binary indicator: 0 = in-flight, 1 = out-of-flight
      -- Used to exclude out-of-flight dates from cost calculations
      CASE
        WHEN a.date BETWEEN b.start_date AND
            CASE WHEN a.package_roadblock LIKE '%email%' THEN DATE_ADD(b.end_date, INTERVAL 60 DAY)
                  ELSE b.end_date END
        THEN 0 ELSE 1
      END AS flight_date_flag,

    --! [flight_status_flag] Text status: 'live' if current date is within flight window
      -- Used for status reporting and proration decisions
      CASE
        WHEN CURRENT_DATE() BETWEEN b.start_date AND
            CASE WHEN a.package_roadblock LIKE '%email%' THEN DATE_ADD(b.end_date, INTERVAL 60 DAY)
                  ELSE b.end_date END
        THEN 'live' ELSE 'ended'
      END AS flight_status_flag,

    --! [rate_raw] Extracted numeric rate value from end of package_roadblock string
      -- EXAMPLE: "Campaign Name $12.50" would extract 12.50
      -- Used for CPM/CPC/CPA cost calculations
      REGEXP_EXTRACT(a.package_roadblock, r'(\d+\.?\d*)\D*$') AS rate_raw

  FROM `giant-spoon-299605.data_model_2025.new_md` a
  LEFT JOIN `looker-studio-pro-452620.20250327_data_model.prisma_porcessed` b
    ON a.`package_id` = b.package_id
  WHERE a.impressions > 0  -- Filter out zero-impression records
),

--! 2. [ dr. ] delivery rollup |  PRECOMPUTED PACKAGE-LEVEL METRICS
delivery_rollups AS (
  /*
    Computes package-level aggregates used in multiple downstream CTEs.
    IMPORTANT METRICS:
    - total_impressions: All impressions across entire package
    - total_inflight_impressions: Only impressions within flight window
    - min/max dates: For flight window and actual delivery calculations
    
    BUSINESS IMPACT:
    These metrics drive cost proration and distribution calculations.
    The distinction between total_impressions and total_inflight_impressions
    is critical for V2's enhanced CPM overdelivery handling.
  */
  SELECT
    package_id,

    -- Actual min/max delivery dates (including out-of-flight delivery)
    -- Used to determine total active delivery period
    MIN(date) AS d_min_date,
    MAX(date) AS d_max_date,

    -- Min/max dates within the official flight window only
    -- Used for in-flight calculations and proration
    MIN(CASE WHEN date BETWEEN p_start_date AND p_end_date THEN date ELSE NULL END) AS min_flight_date,
    MAX(CASE WHEN date BETWEEN p_start_date AND p_end_date THEN date ELSE NULL END) AS max_flight_date,

    -- Total impressions across entire package (both in and out of flight)
    SUM(impressions) AS total_impressions,
    
    -- Count of distinct placements (for reporting and QA)
    COUNT(DISTINCT placement_id) AS n_of_placements,

    -- NEW IN V2: Only count impressions within the flight window
    -- Critical for CPM overdelivery calculations
    SUM(CASE
      WHEN date BETWEEN p_start_date AND p_end_date THEN impressions
      ELSE 0
    END) AS total_inflight_impressions

  FROM base_delivery_metadata
  GROUP BY package_id
),

--! 3. [ cf. ] CALCULATED FLAGS + PRORATED FIELDS
calculated_fields AS (
  /*
    Adds derived metrics and flags to prepare for cost calculations.
    
    KEY METRICS ADDED:
    - Package-level impression percentages (for cost distribution)
    - Prorated cost and impression targets (adjusted for actual delivery)
    - CPM overdelivery flag
    - Estimated daily CPM (for QA purposes)
    
    BUSINESS LOGIC:
    - Proration adjusts planned costs based on actual delivery days
    - Special handling for currently active ('live') campaigns
    - Windows functions calculate daily and total impression shares
  */
  SELECT
    bd.*,  -- All fields from base_delivery_metadata

    -- ───────────────────────────────────────────────
    -- Fields from delivery_rollups
    dr.n_of_placements,           -- Distinct placements in package
    dr.d_min_date,                -- First date with any delivery
    dr.d_max_date,                -- Last date with any delivery
    dr.min_flight_date,           -- First in-flight delivery date
    dr.max_flight_date,           -- Last in-flight delivery date
    dr.total_impressions AS pkg_total_imps,  -- All impressions (in+out of flight)
    dr.total_inflight_impressions,  -- Only impressions within flight (NEW IN V2)

    -- ───────────────────────────────────────────────
    -- Windowed daily aggregates
    --! [pkg_daily_imps] Daily total impressions across all placements in package
    SUM(bd.impressions) OVER (PARTITION BY bd.package_id, bd.date) AS pkg_daily_imps,

    -- Impression share of daily package total (used for daily cost distribution)
    -- What percentage of today's impressions came from this placement?
    SAFE_DIVIDE(
      bd.impressions,
      SUM(bd.impressions) OVER (PARTITION BY bd.package_id, bd.date)
    ) AS pkg_daily_imps_perc,

    -- Impression share of full package total (used for flat fee distribution)
    -- What percentage of all impressions came from this placement?
    SAFE_DIVIDE(bd.impressions, dr.total_impressions) AS pkg_total_imps_perc,

    -- ───────────────────────────────────────────────
    -- [days_live] Days with in-flight delivery (for proration)
    -- Only counts days between min_flight_date and max_flight_date
    DATE_DIFF(dr.max_flight_date, dr.min_flight_date, DAY) + 1 AS days_live,

    -- ───────────────────────────────────────────────
    -- [prorated_planned_cost_pk] Adjusts costs based on actual active days
    -- ENHANCED IN V2: Special handling for active campaigns
    CASE
      -- Handle null/zero total days
      WHEN bd.p_total_days IS NULL OR bd.p_total_days = 0 THEN NULL
      
      -- For currently active campaigns: prorate based on elapsed days so far
      WHEN flight_status_flag = 'live' 
        THEN (bd.p_pkg_total_planned_cost/bd.p_total_days) *
             (DATE_DIFF(dr.d_max_date, dr.d_min_date, DAY) + 1) -- active days 
      
      -- For ended campaigns: use the lesser of actual vs planned days
      ELSE  
        LEAST(
          DATE_DIFF(dr.d_max_date, dr.d_min_date, DAY) + 1, -- active days
          bd.p_total_days                                    -- planned days
        ) *                           
        (bd.p_pkg_total_planned_cost / 
        LEAST(DATE_DIFF(dr.d_max_date, dr.d_min_date, DAY) + 1, bd.p_total_days)
        )
    END AS prorated_planned_cost_pk,

    -- [prorated_planned_imps_pk] Same proration logic applied to impressions
    CASE
      WHEN bd.p_total_days IS NULL OR bd.p_total_days = 0 THEN NULL
      ELSE
        LEAST(
          DATE_DIFF(dr.d_max_date, dr.d_min_date, DAY) + 1,  -- active days
          bd.p_total_days                                     -- planned days
        ) * bd.p_pkg_total_planned_imps / bd.p_total_days
    END AS prorated_planned_imps_pk,

    -- ───────────────────────────────────────────────
    -- Flags section

 

    --! CPM Overdelivery Flag - used to identify overdelivered CPM campaigns
    -- KEY FOR PRICING: When true, distributes planned cost across all impressions
    CASE
      WHEN dr.total_impressions > bd.p_pkg_total_planned_imps
           AND bd.p_cost_method = 'CPM' THEN 1
      ELSE 0
    END AS cpm_overdelivery_flag,


    -- Estimated CPM (optional QA metric)
    -- Used to validate cost calculations - should align with expected CPM rates
    SAFE_DIVIDE(bd.p_pkg_daily_planned_cost, bd.impressions) * 1000 AS daily_cpm

  FROM base_delivery_metadata bd
  LEFT JOIN delivery_rollups dr
    ON bd.package_id = dr.package_id
),

--! 4. [ cm. ]  COST LOGIC (PRICING ENGINE)
cost_model AS (
  /*
    Core pricing engine that applies business logic for each cost method.
    
    PRICING MODELS SUPPORTED:
    - CPM: Cost per thousand impressions (with overdelivery protection)
    - CPC: Cost per click (based on extracted rate)
    - CPA: Cost per acquisition/conversion (based on extracted rate)
    - Flat: Fixed cost distributed by impression share or daily
    
    BUSINESS LOGIC HIGHLIGHTS:
    - CPM overdelivery: Distributes full cost across all impressions when delivered > planned
    - CPC/CPA: Simple multiplication of rate by clicks/conversions
    - Flat fee: Two distribution methods depending on planned impressions
    - Zero cost for out-of-flight delivery
    
    V2 ENHANCEMENT: Uses total_inflight_impressions for CPM overdelivery calculations
  */
  SELECT
    package_id,
    placement_id,
    date,

    -- Carry forward key metrics for debugging and reporting
    pkg_total_imps,
    total_inflight_impressions,  -- NEW IN V2
    impressions,
    clicks,
    total_conversions,
    rate_raw,
    p_cost_method,
    p_pkg_total_planned_cost,
    p_pkg_total_planned_imps,
    p_total_days,
    prorated_planned_cost_pk,
    flight_date_flag,

    -- ───────────────────────────────────────────────
    -- PRICING LOGIC - Core business rules for cost calculation
    CASE
      -- Out-of-flight delivery always gets zero cost
      WHEN flight_date_flag = 1 THEN 0

      -- CPM MODEL (Cost Per Thousand Impressions)
      WHEN p_cost_method = 'CPM' THEN
        CASE
          -- Overdelivery case: Distribute planned cost across all impressions
          -- V2 CHANGE: Uses total_inflight_impressions instead of pkg_total_imps
          WHEN total_inflight_impressions > SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC)
            THEN SAFE_DIVIDE(p_pkg_total_planned_cost, total_inflight_impressions) * impressions
          
          -- Standard delivery: Use extracted rate * impressions / 1000
          ELSE SAFE_CAST(rate_raw AS NUMERIC) * impressions / 1000
        END

      -- CPC MODEL (Cost Per Click)
      WHEN p_cost_method = 'CPC'
        THEN SAFE_CAST(rate_raw AS NUMERIC) * clicks

      -- CPA MODEL (Cost Per Acquisition/Conversion)
      WHEN p_cost_method = 'CPA'
        THEN SAFE_CAST(rate_raw AS NUMERIC) * total_conversions

      -- FLAT FEE MODEL (Fixed cost distributed by impression or daily)
      WHEN p_cost_method = 'Flat' THEN
        CASE
          -- No impressions planned: Distribute by impression percentage
          -- Used when impressions aren't the main KPI
          WHEN SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) = 0
            THEN (prorated_planned_cost_pk * SAFE_CAST(pkg_total_imps_perc AS NUMERIC))
          
          -- Standard case: Distribute by impression share of in-flight impressions
          -- V2 CHANGE: Uses total_inflight_impressions instead of pkg_total_imps
          ELSE SAFE_CAST(prorated_planned_cost_pk AS NUMERIC) *
               SAFE_DIVIDE(impressions, NULLIF(total_inflight_impressions, 0))
        END

      -- Default fallback (should never happen if data is clean)
      ELSE 0
    END AS daily_recalculated_cost,

    -- ───────────────────────────────────────────────
    -- DEBUG PATH FLAG - Identifies which pricing logic branch was applied
    -- Critical for troubleshooting and validating cost calculations
    CASE
      WHEN flight_date_flag = 1 THEN 'OUT_OF_FLIGHT'
      WHEN p_cost_method = 'CPM' AND pkg_total_imps > SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) THEN 'CPM_OVERDELIVERY'
      WHEN p_cost_method = 'CPM' THEN 'CPM_STANDARD'
      WHEN p_cost_method = 'CPC' THEN 'CPC'
      WHEN p_cost_method = 'CPA' THEN 'CPA'
      WHEN p_cost_method = 'Flat' AND SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) = 0 THEN 'FLAT_DAILY'
      WHEN p_cost_method = 'Flat' THEN 'FLAT_RATIO'
      ELSE 'UNKNOWN'
    END AS daily_recalculated_cost_flag,

    -- Recalculated impressions for reporting - zeros out out-of-flight impressions
    -- Used for reporting metrics that should only include in-flight delivery
    case
      when flight_date_flag = 1 then 0
      else impressions
    end as daily_recalculated_imps

  FROM calculated_fields
)

--! 5. FINAL OUTPUT: APPEND COSTS BACK TO ROWS
-- Joins calculated costs back to the full dataset
SELECT
  cf.*,  -- All calculated fields
  cm.daily_recalculated_cost,  -- Final calculated cost
  cm.daily_recalculated_cost_flag  -- Path flag for debugging
FROM calculated_fields cf
LEFT JOIN cost_model cm
  ON cf.package_id = cm.package_id
  AND cf.placement_id = cm.placement_id
  AND cf.date = cm.date
ORDER BY cf.impressions DESC
