--------------- COMPARISON QUERY FOR P2R44S2 ---------------

-- This query runs both v4.0 and v4.1 cost models for package 'P2R44S2',
-- joining the results to make direct comparison easy.

WITH 
-- ================ V4.0 COST MODEL ==================

v4_0_base_delivery_metadata AS (
  SELECT
    a.date,
    a.campaign,
    a.package_roadblock,
    a.package_id,
    a.placement_id,
    a.impressions,
    a.clicks,
    a.total_conversions,
    b.cost_method AS p_cost_method,
    b.p_package_friendly,
    b.start_date AS p_start_date,
    CASE
      WHEN a.package_roadblock LIKE '%email%' THEN DATE_ADD(b.end_date, INTERVAL 60 DAY)
      ELSE b.end_date
    END AS p_end_date,
    b.total_days AS p_total_days,
    b.planned_cost_pk AS p_pkg_total_planned_cost,
    b.planned_imps_pk AS p_pkg_total_planned_imps
  FROM `giant-spoon-299605.data_model_2025.new_md` a
  LEFT JOIN `looker-studio-pro-452620.20250327_data_model.prisma_porcessed` b
    ON a.package_id = b.package_id
  WHERE a.impressions > 0
    AND a.package_id = 'P2R44S2'
),

v4_0_delivery_rollups AS (
  SELECT
    package_id,
    MIN(date) AS d_min_date,
    MAX(date) AS d_max_date,
    MIN(CASE WHEN date BETWEEN p_start_date AND p_end_date THEN date ELSE NULL END) AS min_flight_date,
    MAX(CASE WHEN date BETWEEN p_start_date AND p_end_date THEN date ELSE NULL END) AS max_flight_date,
    SUM(impressions) AS total_impressions,
    COUNT(DISTINCT placement_id) AS n_of_placements
  FROM v4_0_base_delivery_metadata
  GROUP BY package_id
),

v4_0_calculated_fields AS (
  SELECT
    bd.*,
    dr.n_of_placements,
    dr.d_min_date,
    dr.d_max_date,
    dr.min_flight_date,
    dr.max_flight_date,
    dr.total_impressions AS pkg_total_imps,
    SUM(bd.impressions) OVER (PARTITION BY bd.package_id, bd.date) AS pkg_daily_imps,
    SAFE_DIVIDE(bd.impressions, SUM(bd.impressions) OVER (PARTITION BY bd.package_id, bd.date)) AS pkg_daily_imps_perc,
    SAFE_DIVIDE(bd.impressions, dr.total_impressions) AS pkg_total_imps_perc,
    DATE_DIFF(dr.max_flight_date, dr.min_flight_date, DAY) + 1 AS days_live,
    CASE
      WHEN bd.p_total_days IS NULL OR bd.p_total_days = 0 THEN NULL
      ELSE
        LEAST(
          DATE_DIFF(dr.d_max_date, dr.d_min_date, DAY) + 1,
          bd.p_total_days
        ) * bd.p_pkg_total_planned_cost / bd.p_total_days
    END AS prorated_planned_cost_pk,
    CASE
      WHEN bd.date BETWEEN bd.p_start_date AND bd.p_end_date THEN 0
      ELSE 1
    END AS flight_date_flag,
    CASE
      WHEN CURRENT_DATE() BETWEEN bd.p_start_date AND bd.p_end_date THEN 'live'
      ELSE 'ended'
    END AS flight_status_flag,
    CASE
      WHEN dr.total_impressions > bd.p_pkg_total_planned_imps
           AND bd.p_cost_method = 'CPM' THEN 1
      ELSE 0
    END AS cpm_overdelivery_flag,
    REGEXP_EXTRACT(bd.package_roadblock, r'(\d+\.?\d*)\D*$') AS rate_raw
  FROM v4_0_base_delivery_metadata bd
  LEFT JOIN v4_0_delivery_rollups dr
    ON bd.package_id = dr.package_id
),

v4_0_cost_model AS (
  SELECT
    package_id,
    placement_id,
    date,
    pkg_total_imps,
    impressions,
    clicks,
    total_conversions,
    rate_raw,
    p_cost_method,
    p_pkg_total_planned_cost,
    p_pkg_total_planned_imps,
    p_total_days,
    prorated_planned_cost_pk,
    flight_date_flag,
    
    -- Pricing logic
    CASE
      WHEN flight_date_flag = 1 THEN 0
      -- CPM models
      WHEN p_cost_method = 'CPM' THEN
        CASE
          WHEN pkg_total_imps > SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC)
            THEN SAFE_DIVIDE(p_pkg_total_planned_cost, pkg_total_imps) * impressions
          ELSE SAFE_CAST(rate_raw AS NUMERIC) * impressions / 1000
        END
      -- CPC
      WHEN p_cost_method = 'CPC'
        THEN SAFE_CAST(rate_raw AS NUMERIC) * clicks
      -- CPA
      WHEN p_cost_method = 'CPA'
        THEN SAFE_CAST(rate_raw AS NUMERIC) * total_conversions
      -- Flat logic
      WHEN p_cost_method = 'Flat' THEN
        CASE
          WHEN SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) = 0
            THEN SAFE_DIVIDE(p_pkg_total_planned_cost, SAFE_CAST(p_total_days AS NUMERIC))
          ELSE SAFE_CAST(prorated_planned_cost_pk AS NUMERIC) *
               SAFE_DIVIDE(impressions, pkg_total_imps)
        END
      ELSE 0
    END AS daily_recalculated_cost,
    
    -- Debug path
    CASE
      WHEN flight_date_flag = 1 THEN 'OUT_OF_FLIGHT'
      WHEN p_cost_method = 'CPM' AND pkg_total_imps > SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) THEN 'CPM_OVERDELIVERY'
      WHEN p_cost_method = 'CPM' THEN 'CPM_STANDARD'
      WHEN p_cost_method = 'CPC' THEN 'CPC'
      WHEN p_cost_method = 'CPA' THEN 'CPA'
      WHEN p_cost_method = 'Flat' AND SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) = 0 THEN 'FLAT_DAILY'
      WHEN p_cost_method = 'Flat' THEN 'FLAT_RATIO'
      ELSE 'UNKNOWN'
    END AS daily_recalculated_cost_flag,
    
    case
      when flight_date_flag = 1 then 0
      else impressions
    end as daily_recalculated_imps
  FROM v4_0_calculated_fields
),

v4_0_final_output AS (
  SELECT
    cf.date,
    cf.package_id,
    cf.placement_id,
    cf.impressions,
    cf.p_cost_method,
    cf.p_pkg_total_planned_imps,
    cf.pkg_total_imps,
    CAST(NULL AS NUMERIC) AS total_inflight_impressions, -- N/A in v4.0
    cf.flight_date_flag,
    cm.daily_recalculated_cost as v4_0_cost,
    cm.daily_recalculated_cost_flag as v4_0_cost_flag
  FROM v4_0_calculated_fields cf
  LEFT JOIN v4_0_cost_model cm
    ON cf.package_id = cm.package_id
    AND cf.placement_id = cm.placement_id
    AND cf.date = cm.date
),

-- ================ V4.1 COST MODEL ==================

v4_1_base_delivery_metadata AS (
  SELECT 
    a.date,
    a.campaign,
    a.package_roadblock,
    a.package_id,
    a.placement_id,
    a.impressions,
    a.clicks,
    a.total_conversions,
    b.cost_method AS p_cost_method,
    b.p_package_friendly,
    b.start_date AS p_start_date,
    CASE
      WHEN a.package_roadblock LIKE '%email%' THEN DATE_ADD(b.end_date, INTERVAL 60 DAY)
      ELSE b.end_date
    END AS p_end_date,
    b.total_days AS p_total_days,
    b.planned_cost_pk AS p_pkg_total_planned_cost,
    b.planned_imps_pk AS p_pkg_total_planned_imps,
    
    -- Flight flags calculated early
    CASE
      WHEN a.date BETWEEN b.start_date AND
           CASE WHEN a.package_roadblock LIKE '%email%' THEN DATE_ADD(b.end_date, INTERVAL 60 DAY)
                ELSE b.end_date END
      THEN 0 ELSE 1
    END AS flight_date_flag,
    
    CASE
      WHEN CURRENT_DATE() BETWEEN b.start_date AND
           CASE WHEN a.package_roadblock LIKE '%email%' THEN DATE_ADD(b.end_date, INTERVAL 60 DAY)
                ELSE b.end_date END
      THEN 'live' ELSE 'ended'
    END AS flight_status_flag,
    
    REGEXP_EXTRACT(a.package_roadblock, r'(\d+\.?\d*)\D*$') AS rate_raw
  FROM `giant-spoon-299605.data_model_2025.new_md` a
  LEFT JOIN `looker-studio-pro-452620.20250327_data_model.prisma_porcessed` b
    ON a.package_id = b.package_id
  WHERE a.impressions > 0
    AND a.package_id = 'P2R44S2'
),

v4_1_delivery_rollups AS (
  SELECT
    package_id,
    MIN(date) AS d_min_date,
    MAX(date) AS d_max_date,
    MIN(CASE WHEN date BETWEEN p_start_date AND p_end_date THEN date ELSE NULL END) AS min_flight_date,
    MAX(CASE WHEN date BETWEEN p_start_date AND p_end_date THEN date ELSE NULL END) AS max_flight_date,
    SUM(impressions) AS total_impressions,
    COUNT(DISTINCT placement_id) AS n_of_placements,
    SUM(CASE
      WHEN date BETWEEN p_start_date AND p_end_date THEN impressions
      ELSE 0
    END) AS total_inflight_impressions
  FROM v4_1_base_delivery_metadata
  GROUP BY package_id
),

v4_1_calculated_fields AS (
  SELECT
    bd.*,
    dr.n_of_placements,
    dr.d_min_date,
    dr.d_max_date,
    dr.min_flight_date,
    dr.max_flight_date,
    dr.total_impressions AS pkg_total_imps,
    dr.total_inflight_impressions,
    SUM(bd.impressions) OVER (PARTITION BY bd.package_id, bd.date) AS pkg_daily_imps,
    SAFE_DIVIDE(bd.impressions, SUM(bd.impressions) OVER (PARTITION BY bd.package_id, bd.date)) AS pkg_daily_imps_perc,
    SAFE_DIVIDE(bd.impressions, dr.total_impressions) AS pkg_total_imps_perc,
    DATE_DIFF(dr.max_flight_date, dr.min_flight_date, DAY) + 1 AS days_live,
    
    -- [prorated_planned_cost_pk]: new logic for live flights
    CASE
      WHEN bd.p_total_days IS NULL OR bd.p_total_days = 0 THEN NULL
      WHEN flight_status_flag = 'live' 
        THEN (bd.p_pkg_total_planned_cost/bd.p_total_days) *
        (DATE_DIFF(dr.d_max_date, dr.d_min_date, DAY) + 1) 
      ELSE  
        LEAST(
          DATE_DIFF(dr.d_max_date, dr.d_min_date, DAY) + 1,
          bd.p_total_days
          ) * 
        (bd.p_pkg_total_planned_cost / 
        LEAST(DATE_DIFF(dr.d_max_date, dr.d_min_date, DAY) + 1,bd.p_total_days)
          )
    END AS prorated_planned_cost_pk,
    
    CASE
      WHEN dr.total_impressions > bd.p_pkg_total_planned_imps
           AND bd.p_cost_method = 'CPM' THEN 1
      ELSE 0
    END AS cpm_overdelivery_flag
  FROM v4_1_base_delivery_metadata bd
  LEFT JOIN v4_1_delivery_rollups dr
    ON bd.package_id = dr.package_id
),

v4_1_cost_model AS (
  SELECT
    package_id,
    placement_id,
    date,
    pkg_total_imps,
    total_inflight_impressions,
    impressions,
    clicks,
    total_conversions,
    rate_raw,
    p_cost_method,
    p_pkg_total_planned_cost,
    p_pkg_total_planned_imps,
    p_total_days,
    prorated_planned_cost_pk,
    flight_date_flag,
    
    -- Pricing logic
    CASE
      WHEN flight_date_flag = 1 THEN 0
      -- CPM models
      WHEN p_cost_method = 'CPM' THEN
        CASE
          WHEN total_inflight_impressions > SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC)
            THEN SAFE_DIVIDE(p_pkg_total_planned_cost, total_inflight_impressions) * impressions
          ELSE SAFE_CAST(rate_raw AS NUMERIC) * impressions / 1000
        END
      -- CPC
      WHEN p_cost_method = 'CPC'
        THEN SAFE_CAST(rate_raw AS NUMERIC) * clicks
      -- CPA
      WHEN p_cost_method = 'CPA'
        THEN SAFE_CAST(rate_raw AS NUMERIC) * total_conversions
      -- Flat logic
      WHEN p_cost_method = 'Flat' THEN
        CASE
          WHEN SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) = 0
            THEN (prorated_planned_cost_pk * SAFE_CAST(pkg_total_imps_perc AS NUMERIC))
          ELSE 
            SAFE_CAST(prorated_planned_cost_pk AS NUMERIC) *
            SAFE_DIVIDE(impressions, NULLIF(total_inflight_impressions, 0))
        END
      ELSE 0
    END AS daily_recalculated_cost,
    
    -- Debug path
    CASE
      WHEN flight_date_flag = 1 THEN 'OUT_OF_FLIGHT'
      WHEN p_cost_method = 'CPM' AND pkg_total_imps > SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) THEN 'CPM_OVERDELIVERY'
      WHEN p_cost_method = 'CPM' THEN 'CPM_STANDARD'
      WHEN p_cost_method = 'CPC' THEN 'CPC'
      WHEN p_cost_method = 'CPA' THEN 'CPA'
      WHEN p_cost_method = 'Flat' AND SAFE_CAST(p_pkg_total_planned_imps AS NUMERIC) = 0 THEN 'FLAT_DAILY'
      WHEN p_cost_method = 'Flat' THEN 'FLAT_RATIO'
      ELSE 'UNKNOWN'
    END AS daily_recalculated_cost_flag,
    
    case
      when flight_date_flag = 1 then 0
      else impressions
    end as daily_recalculated_imps
  FROM v4_1_calculated_fields
),

v4_1_final_output AS (
  SELECT
    cf.date,
    cf.package_id,
    cf.placement_id,
    cf.impressions,
    cf.p_cost_method,
    cf.p_pkg_total_planned_imps,
    cf.pkg_total_imps,
    cf.total_inflight_impressions,
    cf.flight_date_flag,
    cm.daily_recalculated_cost as v4_1_cost,
    cm.daily_recalculated_cost_flag as v4_1_cost_flag
  FROM v4_1_calculated_fields cf
  LEFT JOIN v4_1_cost_model cm
    ON cf.package_id = cm.package_id
    AND cf.placement_id = cm.placement_id
    AND cf.date = cm.date
)

-- ================ COMPARISON OUTPUT ==================

SELECT
  v40.date,
  v40.package_id,
  v40.placement_id,
  v40.impressions,
  v40.p_cost_method,
  v40.p_pkg_total_planned_imps,
  v40.pkg_total_imps,
  v41.total_inflight_impressions,
  v40.flight_date_flag,
  -- Costs from both versions
  v40.v4_0_cost,
  v41.v4_1_cost,
  -- Calculate difference
  (v41.v4_1_cost - v40.v4_0_cost) AS cost_difference,
  -- Calculate percent difference
  CASE 
    WHEN v40.v4_0_cost = 0 THEN NULL
    ELSE (v41.v4_1_cost - v40.v4_0_cost) / v40.v4_0_cost * 100 
  END AS cost_diff_pct,
  -- Cost flags from both versions
  v40.v4_0_cost_flag,
  v41.v4_1_cost_flag,
  -- Flag if there's a difference in cost logic path
  CASE 
    WHEN v40.v4_0_cost_flag != v41.v4_1_cost_flag THEN 'CHANGED'
    ELSE 'SAME'
  END AS flag_diff
FROM v4_0_final_output v40
FULL OUTER JOIN v4_1_final_output v41
  ON v40.date = v41.date
  AND v40.package_id = v41.package_id
  AND v40.placement_id = v41.placement_id
-- Filter out rows where there's no difference to focus on changes
-- WHERE (v41.v4_1_cost != v40.v4_0_cost OR v40.v4_0_cost_flag != v41.v4_1_cost_flag)
ORDER BY 
  ABS(COALESCE(v41.v4_1_cost, 0) - COALESCE(v40.v4_0_cost, 0)) DESC, -- Biggest differences first
  v40.date
